function ind = smloadinst(file, ind, adaptor, varargin)
% ind = smloadinst(file, ind, adaptor, varargin)
% Add instrument from file generated by smsaveinst to rack at position ind.
% Ind defaults to end+1. Existing instruments are overwritten without
% warning.
% adaptor is the HW adaptor driver and defaults to 'ni';
% varargin are arguments to the instrument object constructor, e.g. gpib,
% visa or serial. If not defaults, the settings are taken from the file
% loaded. (Useful if file was created on the same system).

global smdata;

if ~exist('file','var') || isempty(file) 
    [file,fpath] = uigetfile('','MultiSelect','on');     
end

if nargin < 2 || isempty(ind)
    if isfield(smdata, 'inst')
        ind = length(smdata.inst)+1;
    else
        ind = 1;
    end
end     %%%usually the instrument number will increase by 1

if isempty(strfind(file, 'sminst'))
    file = ['sminst_', file];
end                     %%get the instrument filename

load(file);

if ~isempty(constructor)
    if nargin < 3 || isempty(adaptor) 
        switch func2str(constructor.fn)
            case {'gpib', 'visa'}
                 adaptor = {'ni'
            otherwise 
                adaptor = {};
        end
    elseif ~iscell(adaptor)
        adaptor = {adaptor};
    end
    if strcmp(adaptor, 'tcpclient')
        args = varargin;
        parts = strsplit(args{1}, ':');
        address = parts{1};
        port = str2double(parts{2});
        inst.data.inst = tcpclient(address,port);
    elseif ~strcmp(adaptor, 'none') %adaptor is about vendor information
        if nargin >= 4  % more than 4 variable should be give to varargin
            constructor.args = varargin;
        end
        
        if ~strcmp(adaptor, 'serial') % accommodate the fact that serial() does not need vendor info
            inst.data.inst = constructor.fn(adaptor{:}, constructor.args{:});    %fn is function handles, vendor name and 
        else
            inst.data.inst = constructor.fn(constructor.args{:}); % you will get serial
        end
        set(inst.data.inst, constructor.params, constructor.vals);%%%%%%%%%%%%%%%%%%%%
    end
end
smdata.inst(ind) = inst; % put instrument info into smdata.inst

smcheckdata;
