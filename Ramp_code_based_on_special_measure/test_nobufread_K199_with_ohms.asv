% clear all; close all; instrreset;
% global smaux smscan smdata;
% 
% %% -------------------- Meta & paths --------------------
% smscan.comments = ['Graphene @ RT Gr Vg test on Gr gate pin 18, Si gate gnd.' newline ...
%     'iac1 5 nA 17.7777 Hz with 100 Mohm on 17-14, iac2 measures voltage drop 17-14.'];
% smscan.name = 'Graphene';
% 
% % === Adjust these paths to your environment ===
% smaux.datadir     = 'C:\Users\wanglabadmin\Desktop\Special-Measure-main\test';
% smaux.pptsavefile = smaux.datadir;    % folder or a .ppt/.pptx file path
% smaux.pptMode     = 'ppt';            % 'ppt' or 'pptx'
% 
% 
% %% -------------------- GPIB --------------------
% GPIB_BOARD        = 'ni';
% BOARD_NUM         = 0;
% K2450_GPIB        = 18;  % K2450 GPIB address
% K199_GPIB         = 26;   % K199 GPIB address
% 
% %% -------------------- Dummy instrument (for outer loop) --------------------
% smloadinst('test');
% smaddchannel('test','CH1','dummy');
% smaddchannel('test','CH2','count');
% 
% 
% %% -------------------- Model199 (DMM) --------------------
% try
%     ind_199 = smloadinst('K199', [], GPIB_BOARD, BOARD_NUM, K199_GPIB);
%     smopen(ind_199);
%     smdata.inst(ind_199).name    = 'K199';
%     smdata.inst(ind_199).cntrlfn = @smcK199_Ramp;   % your installed driver
% 
%     % Measurement channels (adjust ranges to taste)
%     smaddchannel('K199','V', 'V_K199', [-10, 10, Inf, 1]);          % volts
%     smaddchannel('K199','I', 'I_K199', [-1e-6, 1e-6, Inf, 1e6]);    % amps
%     smaddchannel('K199','OHMS','OHMS_K199', [0, 900e6, Inf, 1]);    % OHMS
% catch err
%     fprintf(['*ERROR* K199: ' err.identifier ': ' err.message '\n']);
%     rethrow(err);
% end
% 
% 
% % ----- Build loops (put OHMS in GETCHAN of loop 1) -----
% innerLoopSet = 'CH1';        % dummy indexer (NOT OHMS_K199)
% outerLoopSet = 'CH2';        % outer dummy
% 
% myChannel = {'OHMS_K199'};   % what we read each inner step
% 
% % Loop 1: indexer that reads OHMS
% smscan.loops(1).npoints  = npointsInnerLoop;
% smscan.loops(1).rng      = [minInnerLoop maxInnerLoop];
% smscan.loops(1).getchan  = myChannel;       % read OHMS
% smscan.loops(1).setchan  = {innerLoopSet};  % dummy set
% smscan.loops(1).ramptime = 0;
% smscan.loops(1).waittime = InnerLoopwaittime;
% 
% % Loop 2: single-point wrapper
% smscan.loops(2).npoints  = npointsOuterLoop;
% smscan.loops(2).rng      = [minOuterLoop maxOuterLoop];
% smscan.loops(2).getchan  = {};              % nothing to read
% smscan.loops(2).setchan  = {outerLoopSet};  % dummy set
% smscan.loops(2).ramptime = 0;
% smscan.loops(2).waittime = 0;
% 
% %% ---- Pick next filename ----
% myFileList = ls(smaux.datadir);
% myFileListSize = size(myFileList);
% myDataFileNumbers = [];
% for ii=1:myFileListSize(1)
%     if length(strsplit(strtrim(myFileList(ii, :)), '_')) > 1
%         thisStrSplit = strsplit(strtrim(myFileList(ii, :)), '_');
%         thisStrSplit = strsplit(thisStrSplit{end}, '.');
%         tmp = str2double(thisStrSplit{1});
%         if ~isnan(tmp), myDataFileNumbers = [myDataFileNumbers tmp]; end
%     end
% end
% if ~isempty(myDataFileNumbers), runNumber = max(myDataFileNumbers) + 1; else, runNumber = 1001; end
% scanFilename = [smaux.datadir filesep smscan.name '_' num2str(runNumber) '.mat'];
% disp(['Run number set to ' num2str(runNumber) '.']);
% disp(['Filename is ' scanFilename '.']);
% disp(['The current time is: ' datestr(datetime)]);
% 
% 
%         fprintf('Trying alternative smrun syntax...\n');
%         smrun(smscan, scanFilename);
% 
% %% -------------------- Local helper: UpdateConstants --------------------
% function myUpdatedScan = UpdateConstants(myScan)
% allchans = {myScan.consts.setchan};
% setchans = {}; setvals = [];
% for i=1:length(myScan.consts)
%     if myScan.consts(i).set
%         setchans{end+1}=myScan.consts(i).setchan;
%         setvals(end+1)=myScan.consts(i).val;
%     end
% end
% if ~isempty(setchans)
%     smset(setchans, setvals);
%     newvals = cell2mat(smget(allchans));
%     for i=1:length(myScan.consts)
%         myScan.consts(i).val=newvals(i);
%     end
% end
% myUpdatedScan = myScan;
% end





clear all; close all; instrreset;
global smaux smscan smdata;

%% -------------------- Meta & paths --------------------
smscan.comments = ['K199 DMM Resistance measurement @ RT.' newline ...
    'Measuring resistance across sample terminals using K199 in ohms mode.'];
smscan.name = 'ResistanceMeasurement';

% === Adjust these paths to your environment ===
smaux.datadir     = 'C:\Users\wanglabadmin\Desktop\Special-Measure-main\test';
smaux.pptsavefile = smaux.datadir;    % folder or a .ppt/.pptx file path
smaux.pptMode     = 'ppt';            % 'ppt' or 'pptx'


%% -------------------- GPIB --------------------
GPIB_BOARD        = 'ni';
BOARD_NUM         = 0;
K199_GPIB         = 26;   % K199 GPIB address

%% -------------------- Dummy instrument (for outer loop) --------------------
smloadinst('test');
smaddchannel('test','CH1','dummy');
smaddchannel('test','CH2','count');


%% -------------------- Model199 (DMM) --------------------
try
    ind_199 = smloadinst('K199', [], GPIB_BOARD, BOARD_NUM, K199_GPIB);
    smopen(ind_199);
    smdata.inst(ind_199).name    = 'K199';
    smdata.inst(ind_199).cntrlfn = @smcK199_Ramp;   % your installed driver

    % Measurement channels for resistance
    smaddchannel('K199','OHMS','OHMS_K199',  [0, 1e9, Inf, 1]);          % ohms (0 to 1GOhm range)
    smaddchannel('K199','V', 'V_K199', [-10, 10, Inf, 1]);         % volts (backup channel)
    smaddchannel('K199','I', 'I_K199', [-1e-6, 1e-6, Inf, 1e6]);   % amps (backup channel)
catch err
    fprintf(['*ERROR* K199: ' err.identifier ': ' err.message '\n']);
    rethrow(err);
end



%     % Measurement channels (adjust ranges to taste)
%     smaddchannel('K199','V', 'V_K199', [-10, 10, Inf, 1]);          % volts
%     smaddchannel('K199','I', 'I_K199', [-1e-6, 1e-6, Inf, 1e6]);    % amps
%     smaddchannel('K199','OHMS','OHMS_K199', [0, 900e6, Inf, 1]);    % OHMS
% catch err
%     fprintf(['*ERROR* K199: ' err.identifier ': ' err.message '\n']);
%     rethrow(err);
% end

%% ==================== Scan definition ====================
innerLoopChannel = 'dummy';      % dummy channel for time-based measurements
InnerLoopwaittime = 1.0;          % 1 second between measurements
npointsInnerLoop  = 100;          % 100 resistance measurements
minInnerLoop      = 1;
maxInnerLoop      = npointsInnerLoop;

myChannel = {'R_K199'};           % what we read each inner step (resistance)

% Outer loop is a single point wrapper
outerLoopChannel  = 'count';     % VALID channel name (not a device name)
npointsOuterLoop  = 1;
minOuterLoop      = 1;
maxOuterLoop      = 1;

% Display: the data are produced by loop 1
smscan.saveloop = 1;
smscan.disp = struct([]);
for k = 1:numel(myChannel)
    smscan.disp(k).loop    = 1;
    smscan.disp(k).channel = k;   % index within getchan of loop 1
    smscan.disp(k).dim     = 1;   % 1D trace
end

% ----- Build loops (put resistance in GETCHAN of loop 1) -----
smscan.loops = struct;

% Loop 1: indexer that reads resistance
smscan.loops(1).npoints  = npointsInnerLoop;
smscan.loops(1).rng      = [minInnerLoop maxInnerLoop];
smscan.loops(1).getchan  = myChannel;           % <-- measure resistance
smscan.loops(1).setchan  = {innerLoopChannel};  % dummy index
smscan.loops(1).ramptime = 0;
smscan.loops(1).waittime = InnerLoopwaittime;

% Loop 2: single-point wrapper; no data acquisition here
smscan.loops(2).npoints  = npointsOuterLoop;
smscan.loops(2).rng      = [minOuterLoop maxOuterLoop];
smscan.loops(2).getchan  = {};                  % nothing to read here
smscan.loops(2).setchan  = {outerLoopChannel};  % valid dummy channel
smscan.loops(2).ramptime = 0;
smscan.loops(2).waittime = 0;

% Constants updater (safe if none)
if ~isfield(smscan, 'consts')
    smscan.consts = struct('set', {}, 'setchan', {}, 'val', {});
end
smscan = UpdateConstants(smscan);

%% ---- Pick next filename ----
myFileList = ls(smaux.datadir);
myFileListSize = size(myFileList);
myDataFileNumbers = [];
for ii=1:myFileListSize(1)
    if length(strsplit(strtrim(myFileList(ii, :)), '_')) > 1
        thisStrSplit = strsplit(strtrim(myFileList(ii, :)), '_');
        thisStrSplit = strsplit(thisStrSplit{end}, '.');
        tmp = str2double(thisStrSplit{1});
        if ~isnan(tmp), myDataFileNumbers = [myDataFileNumbers tmp]; end
    end
end
if ~isempty(myDataFileNumbers), runNumber = max(myDataFileNumbers) + 1; else, runNumber = 1001; end
scanFilename = [smaux.datadir filesep smscan.name '_' num2str(runNumber) '.mat'];
disp(['Run number set to ' num2str(runNumber) '.']);
disp(['Filename is ' scanFilename '.']);
disp(['The current time is: ' datestr(datetime)]);

% Set K199 to resistance measurement mode before starting
fprintf('Setting K199 to resistance measurement mode...\n');
% You may need to send appropriate SCPI commands here depending on your driver
% Example: smset('R_K199_mode', 'resistance');  % if your driver supports this

fprintf('Starting resistance measurements...\n');
smrun(smscan, scanFilename);

%% -------------------- Local helper: UpdateConstants --------------------
function myUpdatedScan = UpdateConstants(myScan)
allchans = {myScan.consts.setchan};
setchans = {}; setvals = [];
for i=1:length(myScan.consts)
    if myScan.consts(i).set
        setchans{end+1}=myScan.consts(i).setchan;
        setvals(end+1)=myScan.consts(i).val;
    end
end
if ~isempty(setchans)
    smset(setchans, setvals);
    newvals = cell2mat(smget(allchans));
    for i=1:length(myScan.consts)
        myScan.consts(i).val=newvals(i);
    end
end
myUpdatedScan = myScan;
end
